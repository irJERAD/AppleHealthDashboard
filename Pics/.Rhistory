p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=source))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
# Focus on Heart Rate dynamics
df <- dfs$HKQuantityTypeIdentifierHeartRate
# create min, max, average
df$min <- min(df$value)
df$max <- max(df$value)
df$average <- mean(df$value)
## Original 'source' var is actually sourceName
# make source of record a factor class
df$sourceName <- as.factor(df$sourceName)
# Convert units
df$min <- as.integer(df$min*60)
df$max <- as.integer(df$max*60)
df$average <- as.integer(df$average*60)
df$unit <- 'count/min'
# Remove outliers
df <- df[abs(df$average -  mean(df$average)) < 3*sd(df$average), ]
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=source))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
p
View(df)
# -*- coding: utf-8 -*-
# Setting up all required elements
options(stringsAsFactors=FALSE)
Sys.setlocale(category="LC_ALL", locale = "en_US.UTF-8")
library(XML)
library(ggplot2)
#####################
#   PREPROCESSING   #
#####################
# It's possible to meet whitespaced tag attributes, that ruins xml-parser.
# So first let's just read xml file as text.
exportPath <- '/Users/irJERAD/Documents/Data-Apps/AppleHealthDashboard/apple_health_export/export.xml'
#load apple health export.xml file
xml <- xmlParse(exportPath)
#transform xml file to data frame - select the Record rows from the xml file
dfs <- XML:::xmlAttrsToDataFrame(xml["//Record"])
#####################
#     ANALYSIS      #
#####################
# Focus on Heart Rate dynamics
df <- dfs$HKQuantityTypeIdentifierHeartRate
# create min, max, average
df$min <- min(df$value)
df$max <- max(df$value)
df$average <- mean(df$value)
## Original 'source' var is actually sourceName
# make source of record a factor class
df$sourceName <- as.factor(df$sourceName)
# Convert units
df$min <- as.integer(df$min*60)
df$max <- as.integer(df$max*60)
df$average <- as.integer(df$average*60)
df$unit <- 'count/min'
# Remove outliers
df <- df[abs(df$average -  mean(df$average)) < 3*sd(df$average), ]
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=source))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
df <- dfs$HKQuantityTypeIdentifierHeartRate
df <- dfs['HKQuantityTypeIdentifierHeartRate']
View(dfs)
df <- dfs$type['HKQuantityTypeIdentifierHeartRate']
df <- dfs$type == 'HKQuantityTypeIdentifierHeartRate'
df <- df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
df = df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
heart = df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
class(df)
library(dplyr)
library(ggplot2)
library(lubridate)
library(XML)
# Set path to export
exportPath <- "/Users/irJERAD/Documents/Data-Apps/AppleHealthDashboard/apple_health_export/export.xml"
#load apple health export.xml file
xml <- xmlParse(exportPath)
#transform xml file to data frame - select the Record rows from the xml file
df <- XML:::xmlAttrsToDataFrame(xml["//Record"])
#make value variable numeric
## TODO fix error NAs introduced by coercion  (looks like a single extra row is added)
df$value <- as.numeric(as.character(df$value))
#make endDate in a date time variable POSIXct using lubridate with eastern time zone
df$endDate <-ymd_hms(df$endDate,tz="America/Los_Angeles")
##add in year month date dayofweek hour columns
df$month<-format(df$endDate,"%m")
df$year<-format(df$endDate,"%Y")
df$date<-format(df$endDate,"%Y-%m-%d")
df$dayofweek <-wday(df$endDate, label=TRUE, abbr=FALSE)
df$hour <-format(df$endDate,"%H")
#####################
#     ANALYSIS      #
#####################
# Focus on Heart Rate dynamics
df <- df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
# create min, max, average
df$min <- min(df$value)
df$max <- max(df$value)
df$average <- mean(df$value)
## Original 'source' var is actually sourceName
# make source of record a factor class
df$sourceName <- as.factor(df$sourceName)
# Convert units
df$min <- as.integer(df$min*60)
df$max <- as.integer(df$max*60)
df$average <- as.integer(df$average*60)
df$unit <- 'count/min'
# Remove outliers
df <- df[abs(df$average -  mean(df$average)) < 3*sd(df$average), ]
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=source))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
length(source)
names(source)
names(sourceName)
sourceName
df$sourceName
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=sourceName))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
View(df)
rm(list = ls())
source('~/Documents/Data-Apps/AppleHealthDashboard/Pics/AlexAppleHealth.R')
rm(list = ls())
source('~/Documents/Data-Apps/AppleHealthDashboard/Pics/AlexAppleHealth.R')
source('~/Documents/Data-Apps/AppleHealthDashboard/AppleHealthDashboardScrips.R')
df = df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
source('~/Documents/Data-Apps/AppleHealthDashboard/Pics/AlexAppleHealth.R')
rm(list = ls())
exportPath <- "/Users/irJERAD/Documents/Data-Apps/AppleHealthDashboard/apple_health_export/export.xml"
xml <- xmlParse(exportPath)
df <- XML:::xmlAttrsToDataFrame(xml["//Record"])
df$value <- as.numeric(as.character(df$value))
df$endDate <-ymd_hms(df$endDate,tz="America/Los_Angeles")
df$month<-format(df$endDate,"%m")
df$year<-format(df$endDate,"%Y")
df$date<-format(df$endDate,"%Y-%m-%d")
df$dayofweek <-wday(df$endDate, label=TRUE, abbr=FALSE)
df$hour <-format(df$endDate,"%H")
rm(list = ls())
exportPath <- "/Users/irJERAD/Documents/Data-Apps/AppleHealthDashboard/apple_health_export/export.xml"
xml <- xmlParse(exportPath)
df <- XML:::xmlAttrsToDataFrame(xml["//Record"])
df$value <- as.numeric(as.character(df$value))
df$endDate <-ymd_hms(df$endDate,tz="America/Los_Angeles")
df$month<-format(df$endDate,"%m")
df$year<-format(df$endDate,"%Y")
df$date<-format(df$endDate,"%Y-%m-%d")
df$dayofweek <-wday(df$endDate, label=TRUE, abbr=FALSE)
df$hour <-format(df$endDate,"%H")
df = df %>% filter(type == 'HKQuantityTypeIdentifierHeartRate')
df$min <- min(df$value)
df$max <- max(df$value)
df$average <- mean(df$value)
df$sourceName <- as.factor(df$sourceName)
df$min <- as.integer(df$min*60)
df$max <- as.integer(df$max*60)
df$average <- as.integer(df$average*60)
df$unit <- 'count/min'
df$average <- df[abs(df$average -  mean(df$average)) < 3*sd(df$average), ]
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=sourceName))
p <- p + geom_smooth(method='loess')
#p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
p
df$average <- mean(df$value)
p <- ggplot(df, aes(x=startDate, y=average))
p <- p + geom_point(aes(color=sourceName))
p <- p + geom_smooth(method='loess')
p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
p <- ggplot(df, aes(x=startDate, y=value))
p <- p + geom_point(aes(color=sourceName))
p <- p + geom_smooth(method='loess')
p <- p + scale_color_brewer(palette='Dark2')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
p <- p + theme_bw()
p
View(df)
tmp <- df$sourceName['Jerad's Apple Watch']
tmp <- df[,'sourceName'] == "Jerad's Apple Watch"
tmp <- df[,'sourceName' == "Jerad's Apple Watch"]
tmp <- df[,'sourceName'] == "Jerad's Apple Watch"
sum(tmp)
tmp
tail(tmp)
tail(tmp, n = 5-)
tail(tmp, n = 50)
tmp <- df$sourceName == "Jerad's Apple Watch"
sum(tmp)
tmp <- df$sourceName["Jerad's Apple Watch"]
length(tmp)
tmp
tmp <- df$sourceName["Jerad's Apple Watch",]
tmp <- df$sourceName["Jerad's Apple Watch",:]
tmp <- df[df$sourceName=='Jerad's Apple Watch']
tmp <- df[df$sourceName=="Jerad's Apple Watch"]
tmp <- df[df$sourceName=="Jerad's Apple Watch",]
tmp <- df[df$sourceName=="Jerad's Apple Watch",:]
tmp <- df[,df$sourceName=="Jerad's Apple Watch"]
tmp <- filter(df, type == "Jerad's Apple Watch")
View(tmp)
tmp <- filter(df, sourceName == "Jerad's Apple Watch")
mp <- filter(df$sourceName, sourceName == "Jerad/'s Apple Watch")
mp <- filter_(df$sourceName, sourceName == "Jerad/'s Apple Watch")
mp <- filter_(df, sourceName == "Jerad\'s Apple Watch")
View(df)
mp <- filter(df, sourceName == "Jerad\'s Apple Watch")
mp <- filter_(df, df$sourceName == "Jerad\'s Apple Watch")
mp <- filter_(df,sourceName == "Jerad\'s Apple Watch")
mp <- filter(df,sourceName == "Jerad\'s Apple Watch")
mp <- filter(df,sourceName == 'Jerad\'s Apple Watch')
max(df$startDate)
quantile(df$startDate)
min(df$startDate)
library(plotly)
ggplotly(p)
qplot(value, startDate, data=df, colour = sourceName)
ggplotly()
h <- qplot(startDate, value, data=df, colour = sourceName)
ggplotly(h)
ggplotly(p)
p <- ggplot(df, aes(x=startDate, y=value))
p <- p + geom_point(aes(color=sourceName))
p <- p + geom_smooth(method='loess')
p <- p + labs(title='Heart Rate Dynamics', x='Date', y='Beats per min')
ggplotly(p)
qplot(value, startDate, data=df, colour = sourceName, xlab = 'Date', ylab = 'Beats per min', main = 'Heart Rate Dynamics')
ggplotly()
qplot(startDate, value, data=df, colour = sourceName, xlab = 'Date', ylab = 'Beats per min', main = 'Heart Rate Dynamics')
ggplotly()
install.packages("gapminder")
min(df$date)
max(df$date)
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
geom_smooth() +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 50, colour = "#668cff"),
axis.title.x = element_text(size = 20, colour = "#6699ff"),
axis.title.y = element_text(size = 20, colour = "#ff8080"),
plot.background = element_rect(fill = "orange", color = "gray", size = 2))
ggplotly(y)
ggplotly(h)
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 50, colour = "#668cff"),
axis.title.x = element_text(size = 20, colour = "#6699ff"),
axis.title.y = element_text(size = 20, colour = "#ff8080"),
plot.background = element_rect(fill = "orange", color = "gray", size = 2))
ggplotly(h)
update.packages(ggplot2, repos = "https://cloud.r-project.org")
update.packages('ggplot2', repos = "https://cloud.r-project.org")
update.packages('plotly', repos = "https://cloud.r-project.org")
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 50, colour = "#668cff"),
axis.title.x = element_text(size = 20, colour = "#6699ff"),
axis.title.y = element_text(size = 20, colour = "#ff8080"),
plot.background = element_rect(fill = "orange", color = "gray", size = 2))
ggplotly(h)
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 50, colour = "#668cff"),
axis.title.x = element_text(size = 20, colour = "#6699ff"),
axis.title.y = element_text(size = 20, colour = "#ff8080"),
plot.background = element_rect(fill = "orange", color = "gray", size = 2))
ggplotly(h)
ggplotly(h, tooltip = 'text')
ggplotly(h, tooltip = c('text', df$startDate))
ggplotly(h, tooltip = df$startDate)
ggplotly(h, tooltip = 'startDate')
ggplotly(h, tooltip = c('text','\n','startDate')
)
ggplotly(h, tooltip = c('startDate', 'text'))
ggplotly(h, tooltip = c(date, 'text'))
ggplotly(h, tooltip = c('date', 'text'))
ggplotly(h, tooltip = c('endDate', 'text'))
ggplotly(h, tooltip = c('startDate', 'text'))
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value), paste("On:" date))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value) + paste("On:", date)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
ggplotly(h, tooltip = 'text')
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value), paste("On:", date)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value), paste("On:", date)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
h <- df %>%
# text is the tool tip
ggplot(aes(x = startDate, y = value, text = (paste("BPM:", value, '\n', date)))) +
# Color and implied key
geom_point(aes(color=sourceName)) +
#  geom_smooth(method = lm) +
#  ggtittle("My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017") +
#  xlab("Date") +
#  ylab("Beats per min") +
labs(title = "My Heart Rate From April 13th, 2015 through current data Export Jan 5th 2017",
x = "2015 --- Date --- 2017", y = "Beats per min") +
theme(title = element_text(size = 25, colour = "red"),
axis.title.x = element_text(size = 15, colour = "#fff080"),
axis.title.y = element_text(size = 15, colour = "#fff080"),
plot.background = element_rect(fill = "orange", color = "black", size = 2))
ggplotly(h, tooltip = 'text')
names(economics)
p <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
ggplotly(p)
p <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
)) %>%
add_trace(x = ~date,                                         # scatter's "x": /r/reference/#scatter-x
y = ~fitted((loess(uempmed ~ as.numeric(date)))),  # scatter's "y": /r/reference/#scatter-y
mode = 'lines',                                    # scatter's "y": /r/reference/#scatter-mode
line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line
color = "#5E88FC",                               # line's "color": /r/reference/#scatter-line-color
dash = "dashed"                                  # line's "dash" property: /r/reference/#scatter-line-dash
)
)
ggplotly(p)
p1 <- <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p2 <- <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
)) %>%
add_trace(x = ~date,                                         # scatter's "x": /r/reference/#scatter-x
y = ~fitted((loess(uempmed ~ as.numeric(date)))),  # scatter's "y": /r/reference/#scatter-y
mode = 'lines',                                    # scatter's "y": /r/reference/#scatter-mode
line = list(                                       # line is a named list, valid keys: /r/reference/#scatter-line
color = "#5E88FC",                               # line's "color": /r/reference/#scatter-line-color
dash = "dashed"                                  # line's "dash" property: /r/reference/#scatter-line-dash
)
)
names(economics)
class(economics$pce)
quantile(economics$pce)
p1 <- <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p1 <- <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
z = ~pce,
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
p1 <- <- plot_ly(economics,
type = "scatter",        # all "scatter" attributes: https://plot.ly/r/reference/#scatter
x = ~date,               # more about scatter's "x": /r/reference/#scatter-x
y = ~uempmed,            # more about scatter's "y": /r/reference/#scatter-y
name = "unemployment",   # more about scatter's "name": /r/reference/#scatter-name
marker = list(           # marker is a named list, valid keys: /r/reference/#scatter-marker
color="#264E86"        # more about marker's "color" attribute: /r/reference/#scatter-marker-color
))
)
